
{
    "swagger": "2.0",
    "info": {
        "description": "This is a simple example NodeJS API project to demonstrate Swagger Documentation",
        "version": "1.0.0",
        "title": "Tasks API",
        "contact": {
            "email": "abc@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "schemes": ["http"],
    "host": "localhost:3001",
    "basePath": "",
    "paths" : {
        "/clients/" : {
            "get" : {
                "summary" : "Get all clients",
                "description": "Gets all clients",
                "produces": ["application/json"],
                "parameters": [{  
                    "name":"filter",
                    "in":"query",
                    "description":"The field by which we filter the results",
                    "required":false,
                    "type":"string",
                    "default": "all",
                    "enum": ["all", "id"]
                 },
                 {  
                    "name":"page",
                    "in":"query",
                    "description":"The page number",
                    "required":false,
                    "type":"integer",
                    "default": "1"
                 },
                 {  
                    "name":"filterBy",
                    "in":"query",
                    "description":"Used only with the <b>filter</b> parameter to filter results",
                    "required":false
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema":{
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                },
                                "totalRecordsNumber":{
                                    "type": "integer",
                                    "description": "Number of returned items"
                                },
                                "data":{
                                    "type": "object",
                                    "description": "The returned data"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/clients" : {
            "post" : {
                "summary" : "Create a new client",
                "description": "Handles the submit of the client form",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters":[
                    {
                      "in": "body",
                      "name": "body",
                      "description": "Client object",
                      "required": false,
                      "schema": {
                        "$ref": "#/definitions/post_clients"
                      }
                    }
                ],                
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                },
                                "data":{
                                    "type": "integer",
                                    "description": "The ID of the newly created client"
                                }
                            }
                        }
                    }
                }
            },
            "put" : {
                "summary" : "Update a client",
                "description": "Update client data",
                "produces": ["application/json"],
                "parameters": [{  
                    "in": "body",
                    "name": "body",
                    "description": "Client object",
                    "required": false,
                    "schema": {
                      "$ref": "#/definitions/put_clients"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                }
                            }
                        }
                    }
                }
            },
            "delete":{
                "summary" : "Archive client",
                "description": "Moves the client data to a different table and deletes the client from the main DB table",
                "produces": ["application/json"],
                "consumes": ["text/plain"],
                "parameters":[{  
                    "name":"page",
                    "in":"body",
                    "description":"The page number",
                    "required":true,
                    "schema":{"type":"integer"}
                 }],
                 "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR", "FAILED"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invoices" : {
            "post" : {
                "summary" : "Create a new invoice",
                "description": "Creates a new invoice",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters":[
                    {
                      "in": "body",
                      "name": "Invoice object",
                      "required": true,
                      "schema": {
                        "$ref": "#/definitions/post_invoice"
                      }
                    }
                ],               
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                },
                                "data":{
                                    "type": "integer",
                                    "description": "The ID of the newly created client"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/expenses" : {
            "get" : {
                "summary" : "Get expenses",
                "description": "Gets all expenses",
                "produces": ["application/json"],
                "parameters": [{  
                    "name":"filter",
                    "in":"query",
                    "description":"The field by which we filter the results",
                    "required":true,
                    "type":"string",
                    "default": "interval",
                    "enum": ["interval"]
                 },
                 {  
                    "name":"filterBy",
                    "in":"query",
                    "description":"The time interval that is requested. Format is ddmmyy-ddmmyy",
                    "default": "010121-010122",
                    "required":true
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema":{
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR", "INVALID_REQUEST"]
                                },
                                "data":{
                                    "type": "object",
                                    "description": "The returned data"
                                }
                            }
                        }
                    }
                }
            },
            "post" : {
                "summary" : "Add expense",
                "description": "Add a new expense",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "Expense object",
                    "required": true,
                    "schema": {
                      "$ref": "#/definitions/post_expense"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                }
                            }
                        }
                    }
                }
            },
            "delete":{
                "summary" : "Delete expenses",
                "description": "Delete an expense from the DB",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters":[{  
                    "name":"id",
                    "in":"body",
                    "description":"ID of the entry",
                    "required":true,
                    "type":"integer"
                 }],
                 "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR", "FAILED"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/employees":{
            "get":{
                "summary" : "Get all employees",
                "description": "Gets all employees",
                "produces": ["application/json"],
                "parameters": [{  
                    "name":"filter",
                    "in":"query",
                    "description":"The field by which we filter the results",
                    "required":false,
                    "type":"string",
                    "default": "all",
                    "enum": ["all", "id"]
                 },
                 {  
                    "name":"page",
                    "in":"query",
                    "description":"The page number",
                    "required":false,
                    "type":"integer",
                    "default": "1"
                 },
                 {  
                    "name":"filterBy",
                    "in":"query",
                    "description":"Used only with the <b>filter</b> parameter to filter results",
                    "required":false
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema":{
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                },
                                "totalRecordsNumber":{
                                    "type": "integer",
                                    "description": "Number of returned items"
                                },
                                "data":{
                                    "type": "object",
                                    "description": "The returned data"
                                }
                            }
                        }
                    }
                }
            },
            "post" : {
                "summary" : "Add employee",
                "description": "Add a new employee",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "Employee object",
                    "required": true,
                    "schema": {
                      "$ref": "#/definitions/post_employee"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                }
                            }
                        }
                    }
                }
            },
            "put" : {
                "summary" : "Update an employee",
                "description": "Update employee data",
                "produces": ["application/json"],
                "parameters": [{  
                    "in": "body",
                    "name": "body",
                    "description": "Client object",
                    "required": true,
                    "schema": {
                      "$ref": "#/definitions/put_employee"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/employee_salary":{
            "post":{
                "summary" : "Add a salary",
                "description": "Registers a new salary for a employee. Needs the ID of the client and the month of the salary",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "Employee object",
                    "required": true,
                    "schema": {
                      "$ref": "#/definitions/post_salary"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                }
                            }
                        }
                    }
                }
            },
            "get":{
                "summary" : "Get all salaries",
                "description": "Gets all salaries",
                "produces": ["application/json"],
                "parameters": [{  
                    "name":"filter",
                    "in":"query",
                    "description":"The field by which we filter the results",
                    "required":false,
                    "type":"string",
                    "default": "all",
                    "enum": ["all", "paid_to"]
                 },
                 {  
                    "name":"page",
                    "in":"query",
                    "description":"The page number",
                    "required":false,
                    "type":"integer",
                    "default": "1"
                 },
                 {  
                    "name":"filterBy",
                    "in":"query",
                    "description":"Used only with the <b>filter</b> parameter to filter results",
                    "required":false
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema":{
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                },
                                "totalRecordsNumber":{
                                    "type": "integer",
                                    "description": "Number of returned items"
                                },
                                "data":{
                                    "type": "object",
                                    "description": "The returned data"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/employee_vacation":{
            "post":{
                "summary" : "Add vacation days",
                "description": "Registers a vacation interval",
                "produces": ["application/json"],
                "consumes": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "Employee object",
                    "required": true,
                    "schema": {
                      "$ref": "#/definitions/post_vacation"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema": {
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                }
                            }
                        }
                    }
                }
            }            
        }  ,
        "/employee/{id}":{
            "get":{
                "summary" : "Provides an onverview of an employee",
                "description": "Gets data associated with the employee(salaries, vacation days, etc.)",
                "produces": ["application/json"],
                "parameters": [{  
                    "name":"id",
                    "in":"path",
                    "description":"The field by which we filter the results",
                    "required":true,
                    "type":"integer",
                    "default": "1"
                 }],
                "responses": {
                    "200": {
                        "description": "A response has been received",
                        "schema":{
                            "type": "object",
                            "properties":{
                                "status":{
                                    "type": "string",
                                    "description": "Status of the operation",
                                    "enum": ["OK", "ERROR"]
                                },
                                "totalRecordsNumber":{
                                    "type": "integer",
                                    "description": "Number of returned items"
                                },
                                "data":{
                                    "type": "object",
                                    "description": "The returned data"
                                }
                            }
                        }
                    }
                }
            }
        }       
    }, 
    "definitions": {
        "todosResponse": {
            "type": "object",
            "properties": {
                "id": {
                     "type": "integer"
                },
                "task": {
                    "type": "string"
                },
                "assignee": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "Task": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "string"
                },
                "assignee": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "InvalidResponse": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "post_clients":{
            "properties": {
                "client_first_name":{
                    "type":"string",
                    "example":"Popescu",
                    "required":true      
                },
                "client_last_name":{
                    "type":"string",
                    "example":"Popescu",
                    "required":true       
                },
                "client_city":{
                    "type":"string",
                    "example":"Bacau",
                    "required":true 
                },
                "client_county":{
                    "type":"string",
                    "example":"Bacau",
                    "required":true       
                },
                "client_email":{
                    "type":"string",
                    "example":"mail@mail.com"      
                },
                "client_fiscal_1":{
                    "type":"string",
                    "example":"RO/1234/BCX"      
                },
                "client_fiscal_2":{
                    "type":"string",
                    "example":"JUI8888"      
                },
                "client_notes":{
                    "type":"string",
                    "example":"Niste informatii"      
                },
                "client_phone":{
                    "type":"string",
                    "example":"0712341212",
                    "required":true      
                },
                "client_street":{
                    "type":"string",
                    "example":"Strada Strazilor"      
                },
                "client_adress_number":{
                    "type":"string",
                    "example":"14B"
                },
                "client_type":{
                    "type":"string",
                    "example":"pers",
                    "enum":["pers", "comp"],
                    "description":"Use pers for normal clients and comp for companies"    
                },
                "client_zip":{
                    "type":"string",
                    "example":"606060"      
                }         
            }
        },
        "put_clients":{
            "required": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "clientID":{
                    "type":"integer",
                    "example":"1"    
                },
                "dataToBeUpdated":{
                    "type":"object",
                    "properties": {
                        "client_first_name":{
                            "type":"string",
                            "example":"Popescu",
                            "required":false      
                        },
                        "client_last_name":{
                            "type":"string",
                            "example":"Popescu",
                            "required":false    
                        },
                        "client_city":{
                            "type":"string",
                            "example":"Bacau",
                            "required":false 
                        },
                        "client_county":{
                            "type":"string",
                            "example":"Bacau",
                            "required":false 
                        },
                        "client_email":{
                            "type":"string",
                            "example":"mail@mail.com",
                            "required":false       
                        },
                        "client_fiscal_1":{
                            "type":"string",
                            "example":"RO/1234/BCX",
                            "required":false       
                        },
                        "client_fiscal_2":{
                            "type":"string",
                            "example":"JUI8888",
                            "required":false       
                        },
                        "client_notes":{
                            "type":"string",
                            "example":"Niste informatii",
                            "required":false       
                        },
                        "client_phone":{
                            "type":"string",
                            "example":"0712341212",
                            "required":false     
                        },
                        "client_street":{
                            "type":"string",
                            "example":"Strada Strazilor",
                            "required":false       
                        },
                        "client_adress_number":{
                            "type":"string",
                            "example":"14B",
                            "required":false 
                        },
                        "client_type":{
                            "type":"string",
                            "example":"pers",
                            "enum":["pers", "comp"],
                            "description":"Use pers for normal clients and comp for companies",
                            "required":false     
                        },
                        "client_zip":{
                            "type":"string",
                            "example":"606060",
                            "required":false       
                        }         
                    }
                }                
            }
        },
        "post_invoice":{
            "properties": {
                "client_first_name":{
                    "type":"string",
                    "example":"Popescu",
                    "required":true      
                },
                "client_last_name":{
                    "type":"string",
                    "example":"Popescu",
                    "required":true       
                },
                "client_city":{
                    "type":"string",
                    "example":"Bacau",
                    "required":true 
                },
                "client_county":{
                    "type":"string",
                    "example":"Bacau",
                    "required":true       
                },
                "client_email":{
                    "type":"string",
                    "example":"mail@mail.com"      
                },
                "client_fiscal_1":{
                    "type":"string",
                    "example":"RO/1234/BCX"      
                },
                "client_fiscal_2":{
                    "type":"string",
                    "example":"JUI8888"      
                },
                "client_notes":{
                    "type":"string",
                    "example":"Niste informatii"      
                },
                "client_phone":{
                    "type":"string",
                    "example":"0712341212",
                    "required":true      
                },
                "client_street":{
                    "type":"string",
                    "example":"Strada Strazilor"      
                },
                "client_adress_number":{
                    "type":"string",
                    "example":"14B"
                },
                "client_type":{
                    "type":"string",
                    "example":"pers",
                    "enum":["pers", "comp"],
                    "description":"Use pers for normal clients and comp for companies"    
                },
                "client_zip":{
                    "type":"string",
                    "example":"606060"      
                },
                "billingProducts":{
                    "description":"An array containing the information of the billed products",
                    "properties":{
                        "product_name":{
                            "type": "string",
                            "description": "Name of the billed product"                                
                        },
                        "um":{
                            "type": "string",
                            "description": "Measurement unit"                                
                        },
                        "quantity":{
                            "type": "integer",
                            "description": "Quantity"                                
                        },
                        "tax":{
                            "type": "integer",
                            "description": "Applied tax value"                                
                        },
                        "ppi":{
                            "type": "float",
                            "description": "Price per item"                                
                        },
                        "total_price":{
                            "type": "float",
                            "description": "Total price of the products expressed as quantity times price per item"                                
                        }
                    }
                }
            }
        },
        "post_expense":{
            "properties": {
                "exp_name":{
                    "type":"string",
                    "example":"Cheltuiala",
                    "required":true      
                },
                "exp_sum":{
                    "type":"float",
                    "example":"54.5",
                    "required":true       
                },
                "exp_description":{
                    "type":"string",
                    "example":"Descriere cheltuiala",
                    "required":true 
                },
                "exp_date":{
                    "type":"date",
                    "example":"2021-01-01",
                    "required":true       
                },
                "exp_deduct":{
                    "type":"boolean",
                    "example":"true",
                    "description":"Is this expense deductible?",
                    "required":true       
                }
            }
        },
        "post_employee":{
            "properties": {
                "emp_first_name":{
                    "type":"string",
                    "example":"Popescu",
                    "required":true      
                },
                "emp_last_name":{
                    "type":"string",
                    "example":"Ion",
                    "required":true       
                },
                "emp_adress":{
                    "type":"string",
                    "description":"Adresa angajat",
                    "example":"Judet Bacau, Ors. Bacau, Str. Bacaului, nr.67",
                    "required":true 
                },
                "emp_ident_no":{
                    "type":"string",
                    "example":"1929292929292",
                    "description":"Cod identificare(CNP)",
                    "required":true       
                },
                "emp_job_name":{
                    "type":"string",
                    "example":"Muncitor",
                    "description":"Numele ocupatiei",
                    "required":true       
                },
                "emp_cur_salary_gross":{
                    "type":"float",
                    "description":"Salariu brut",
                    "example":"5000",
                    "required":true 
                },
                "emp_tax":{
                    "type":"boolean",
                    "description":"TRUE daca salariatul e scutit de taxe",
                    "example":"false",
                    "enum":[true, false],
                    "required":true 
                }
            }
        },
        "put_employee":{
            "properties": {
                "employeeID":{
                    "type":"int",
                    "example":"1",
                    "description":"ID of the employee to be updated",
                    "required":true      
                },
                "emp_first_name":{
                    "type":"string",
                    "example":"Popescu",
                    "required":false      
                },
                "emp_last_name":{
                    "type":"string",
                    "example":"Ion",
                    "required":false       
                },
                "emp_adress":{
                    "type":"string",
                    "description":"Adresa angajat",
                    "example":"Judet Bacau, Ors. Bacau, Str. Bacaului, nr.67",
                    "required":false 
                },
                "emp_ident_no":{
                    "type":"string",
                    "example":"1929292929292",
                    "description":"Cod identificare(CNP)",
                    "required":false       
                },
                "emp_job_name":{
                    "type":"string",
                    "example":"Muncitor",
                    "description":"Numele ocupatiei",
                    "required":false       
                },
                "emp_cur_salary_gross":{
                    "type":"float",
                    "description":"Salariu brut",
                    "example":"5000",
                    "required":false 
                },
                "emp_tax":{
                    "type":"boolean",
                    "description":"true if we apply the income tax",
                    "example":"false",
                    "enum":[true, false],
                    "required":false 
                },
                "emp_active":{
                    "type":"boolean",
                    "description":"false if the employee is inactive",
                    "example":"true",
                    "enum":[true, false],
                    "required":false 
                }
            }
        },
        "post_salary":{
            "properties": {
                "paid_to":{
                    "type":"int",
                    "example":"1",
                    "description":"ID of the employee",
                    "required":true      
                },
                "salary_month":{
                    "type":"integer",
                    "description":"Month, expressed as an integer, where January is 1",
                    "example":"1",
                    "required":true      
                }                    
            }
        },
        "post_vacation":{
            "properties":{
                "employeeID":{
                    "type":"int",
                    "example":"1",
                    "description":"ID of the employee",
                    "required":true  
                },
                "dates":{
                    "description":"An array containing, for each element, a date and a type",
                    "required":true,
                    "properties":{
                        "date":{
                            "type":"string",
                            "example":"2022-10-10",
                            "description":"date",
                            "required":true 
                        },
                        "type":{
                            "type":"string",
                            "example":"vacation",
                            "description":"date",
                            "required":true 
                        }
                    }
                }
            }
        }
    }
}